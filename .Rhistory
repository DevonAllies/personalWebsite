xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
#| echo: false
#| results: asis
#| message: false
#| warning: false
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/news/f1/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
#| echo: false
#| results: asis
#| message: false
#| warning: false
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
install.packages("xml2", dependencies = TRUE)
install.packages("xml2", dependencies = TRUE)
#| echo: false
#| results: asis
#| message: false
#| warning: false
install.packages("xml2", dependencies = TRUE)
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
install.packages("xml2", dependencies = TRUE)
#| echo: false
#| results: asis
#| message: false
#| warning: false
install.packages("xml2", dependencies = TRUE)
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
#| echo: false
#| results: asis
#| message: false
#| warning: false
install.packages("xml2", dependencies = TRUE)
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
library(xml2)
#| echo: false
#| results: asis
#| message: false
#| warning: false
install.packages("xml2", dependencies = TRUE)
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
install.packages("xml2", dependencies = TRUE)
#| echo: false
#| results: asis
#| message: false
#| warning: false
library(xml2)
library(dplyr) # For data manipulation
# --- IMPORTANT ---
# Replace with an actual F1 RSS feed URL if you find one.
# You might need to search for "F1 news RSS feed" online.
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Example RSS URL (often more stable)
f1_feed <- tryCatch(
read_xml(f1_rss_url),
error = function(e) {
message("Failed to read RSS feed:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# Extract items from the RSS feed (this part depends on the feed's structure)
items <- xml_nodes(f1_feed, "item") # For standard RSS 2.0 feeds
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
# Combine and format for display (top 5 articles)
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n")) # Use '>' for a blockquote style for date
}
} else {
cat("Could not retrieve latest F1 news from RSS feed at this time. (Check feed URL)\n\n")
}
} else {
cat("## F1 News\n\n")
cat("Failed to retrieve F1 news from RSS. Please check your internet connection or the RSS URL.\n\n")
}
#| label: f1-news
#| results: asis
#| message: false
#| warning: false
#| error: true # Keep this for debugging, you can remove it later
library(xml2) # <--- THIS MUST BE AT THE TOP
library(dplyr)
library(httr)
# --- IMPORTANT ---
# REPLACE THIS WITH THE ACTUAL, VERIFIED RSS FEED URL YOU FOUND
f1_rss_url <- "YOUR_VERIFIED_F1_RSS_FEED_URL_HERE" # Make sure this URL is correct!
cat(paste0("Attempting to fetch RSS from: ", f1_rss_url, "\n"))
response <- tryCatch(
GET(f1_rss_url),
error = function(e) {
message("HTTP GET request failed:", e$message)
NULL
}
)
if (is.null(response)) {
cat("## F1 News\n")
cat("Failed to establish connection. Check internet or URL.\n\n")
} else if (status_code(response) != 200) {
cat(paste0("## F1 News\n"))
cat(paste0("Failed to retrieve RSS feed. HTTP Status Code: ", status_code(response), "\n"))
cat(paste0("Content-Type: ", headers(response)$`Content-Type`, "\n\n"))
} else {
f1_feed <- tryCatch(
read_xml(content(response, "text", encoding = "UTF-8")),
error = function(e) {
message("Failed to parse XML:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# --- REMAINDER OF YOUR RSS PARSING CODE ---
items <- xml_nodes(f1_feed, "item") # This line needs xml2 to be loaded above!
if (length(items) == 0) {
cat("## F1 News\n")
cat("RSS feed loaded, but no 'item' nodes found. Check feed structure.\n\n")
} else {
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n"))
}
} else {
cat("Could not extract news items from the feed. Check selectors or feed content.\n\n")
}
}
} else {
cat("## F1 News\n\n")
cat("Failed to parse RSS feed into XML. The URL might not be an XML feed, or it's malformed.\n\n")
}
}
#| label: f1-news
#| results: asis
#| message: false
#| warning: false
#| error: true # Keep this for debugging, you can remove it later
library(xml2) # <--- THIS MUST BE AT THE TOP
library(dplyr)
library(httr)
# --- IMPORTANT ---
# REPLACE THIS WITH THE ACTUAL, VERIFIED RSS FEED URL YOU FOUND
f1_rss_url <- "https://www.autosport.com/rss/f1/news/" # Make sure this URL is correct!
cat(paste0("Attempting to fetch RSS from: ", f1_rss_url, "\n"))
response <- tryCatch(
GET(f1_rss_url),
error = function(e) {
message("HTTP GET request failed:", e$message)
NULL
}
)
if (is.null(response)) {
cat("## F1 News\n")
cat("Failed to establish connection. Check internet or URL.\n\n")
} else if (status_code(response) != 200) {
cat(paste0("## F1 News\n"))
cat(paste0("Failed to retrieve RSS feed. HTTP Status Code: ", status_code(response), "\n"))
cat(paste0("Content-Type: ", headers(response)$`Content-Type`, "\n\n"))
} else {
f1_feed <- tryCatch(
read_xml(content(response, "text", encoding = "UTF-8")),
error = function(e) {
message("Failed to parse XML:", e$message)
NULL
}
)
if (!is.null(f1_feed)) {
# --- REMAINDER OF YOUR RSS PARSING CODE ---
items <- xml_nodes(f1_feed, "item") # This line needs xml2 to be loaded above!
if (length(items) == 0) {
cat("## F1 News\n")
cat("RSS feed loaded, but no 'item' nodes found. Check feed structure.\n\n")
} else {
headlines <- items %>%
xml_node("title") %>%
xml_text()
links <- items %>%
xml_node("link") %>%
xml_text()
dates <- items %>%
xml_node("pubDate") %>%
xml_text()
news_df <- tibble(
headline = head(headlines, 5),
link = head(links, 5),
date = head(dates, 5)
)
cat("## Latest F1 News (via RSS)\n\n")
if (nrow(news_df) > 0) {
for (i in 1:nrow(news_df)) {
cat(paste0("### [", news_df$headline[i], "](", news_df$link[i], ")\n"))
cat(paste0(">", news_df$date[i], "\n\n"))
}
} else {
cat("Could not extract news items from the feed. Check selectors or feed content.\n\n")
}
}
} else {
cat("## F1 News\n\n")
cat("Failed to parse RSS feed into XML. The URL might not be an XML feed, or it's malformed.\n\n")
}
}
reticulate::repl_python()
